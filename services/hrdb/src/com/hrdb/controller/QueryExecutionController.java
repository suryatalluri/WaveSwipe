/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Qualifier;
import com.hrdb.service.HrdbQueryExecutorService;
import com.wavemaker.runtime.data.model.CustomQuery;
import com.wavemaker.runtime.data.exception.QueryParameterMismatchException;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController(value = "Hrdb.QueryExecutionController")
@RequestMapping("/hrdb/queryExecutor")
@Api(description = "Controller class for query execution", value = "QueryExecutionController")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private HrdbQueryExecutorService queryService;

    @RequestMapping(value = "/queries/noOfDepartments", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeNoOfDepartments(Pageable pageable) {
        LOGGER.debug("Executing named query noOfDepartments");
        Page<Object> result = queryService.executeNoOfDepartments(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/TotalBudget", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeTotalBudget(Pageable pageable) {
        LOGGER.debug("Executing named query TotalBudget");
        Page<Object> result = queryService.executeTotalBudget(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/NoOfEmployee", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeNoOfEmployee(Pageable pageable) {
        LOGGER.debug("Executing named query NoOfEmployee");
        Page<Object> result = queryService.executeNoOfEmployee(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/EngineeringEmployees", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeEngineeringEmployees(Pageable pageable) {
        LOGGER.debug("Executing named query EngineeringEmployees");
        Page<Object> result = queryService.executeEngineeringEmployees(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/MarketingEmployees", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeMarketingEmployees(Pageable pageable) {
        LOGGER.debug("Executing named query MarketingEmployees");
        Page<Object> result = queryService.executeMarketingEmployees(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/ProfessionalServicesEmployees", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeProfessionalServicesEmployees(Pageable pageable) {
        LOGGER.debug("Executing named query ProfessionalServicesEmployees");
        Page<Object> result = queryService.executeProfessionalServicesEmployees(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/GeneralAndAdminEmployees", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeGeneralAndAdminEmployees(Pageable pageable) {
        LOGGER.debug("Executing named query GeneralAndAdminEmployees");
        Page<Object> result = queryService.executeGeneralAndAdminEmployees(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/SalesEmployees", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeSalesEmployees(Pageable pageable) {
        LOGGER.debug("Executing named query SalesEmployees");
        Page<Object> result = queryService.executeSalesEmployees(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/SelectedEmployeeID", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeSelectedEmployeeID(@RequestParam(value = "data", required = false) java.lang.Integer data, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SelectedEmployeeID");
        Page<Object> result = queryService.executeSelectedEmployeeID(pageable, data);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/NoOfDepartment", method = RequestMethod.GET)
    @ApiOperation(value = "Process request to execute queries")
    public Page<Object> executeNoOfDepartment(Pageable pageable) {
        LOGGER.debug("Executing named query NoOfDepartment");
        Page<Object> result = queryService.executeNoOfDepartment(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/wm_custom", method = RequestMethod.POST)
    @ApiOperation(value = "Process request to execute customer queries")
    public Page<Object> executeWMCustomQuery(@RequestBody CustomQuery query, Pageable pageable) {
        Page<Object> result = queryService.executeWMCustomQuerySelect(query, pageable);
        LOGGER.debug("got the result {}" + result);
        return result;
    }

    @RequestMapping(value = "/queries/wm_custom_update", method = RequestMethod.POST)
    @ApiOperation(value = "Process request to execute customer queries")
    public int executeWMCustomQuery(@RequestBody CustomQuery query) {
        int result = queryService.executeWMCustomQueryUpdate(query);
        LOGGER.debug("got the result {}" + result);
        return result;
    }
}
